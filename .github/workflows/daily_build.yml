#!/usr/bin/env python3
"""
MineraLink ‚Äì Fixed Tile Builder (Aligned Map Version)
Ensures all layers are reprojected to EPSG:4326 and tiles align correctly.
"""

import os
import json
import time
import subprocess
import requests
from datetime import datetime
from pathlib import Path
from shapely.geometry import shape, mapping
from shapely.ops import transform as shp_transform
from pyproj import Transformer

# -------------------------------------------------------------------
STATES = {
    "WV": ("https://tagis.dep.wv.gov/arcgis/rest/services/WVDEP_enterprise/oil_gas/MapServer/0", "EPSG:3857"),
    "OH": ("https://gis.ohiodnr.gov/arcgis/rest/services/DOG_Services/Oilgas_Wells_public/MapServer/0", "EPSG:4326"),
    "PA": ("https://www.paoilandgasreporting.state.pa.us/arcgis/rest/services/Public/OG_Wells/MapServer/0", "EPSG:3857"),
    "TX": ("https://gis.rrc.texas.gov/server/rest/services/Public/Wells/MapServer/0", "EPSG:3857")
}

DATA_DIR = Path("data")
TILES_DIR = Path("tiles")
LOG_FILE = Path("build_log.txt")
ZOOM_MIN, ZOOM_MAX = 4, 14

# -------------------------------------------------------------------
def log(msg):
    stamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S UTC]")
    print(f"{stamp} {msg}")
    with open(LOG_FILE, "a") as f:
        f.write(f"{stamp} {msg}\n")

# -------------------------------------------------------------------
def fetch_geojson(service_url, src_epsg, state):
    """Fetch wells and reproject to EPSG:4326"""
    layer_url = f"{service_url}/query"
    features = []
    offset = 0
    page = 2000
    transformer = Transformer.from_crs(src_epsg, "EPSG:4326", always_xy=True)

    while True:
        params = {
            "where": "1=1",
            "outFields": "*",
            "f": "geojson",
            "resultOffset": offset,
            "resultRecordCount": page
        }
        try:
            r = requests.get(layer_url, params=params, timeout=90, verify=False)
            r.raise_for_status()
            js = r.json()
            feats = js.get("features", [])
            if not feats:
                break
            for f in feats:
                try:
                    geom = shape(f["geometry"])
                    geom4326 = shp_transform(transformer.transform, geom)
                    f["geometry"] = mapping(geom4326)
                    features.append(f)
                except Exception:
                    continue
            offset += page
            log(f"{state}: fetched {len(feats)} (total {len(features)})")
        except Exception as e:
            log(f"{state}: ERROR {e}")
            break

    if not features:
        log(f"{state}: no valid features")
        return None

    out_path = DATA_DIR / f"{state}.geojson"
    out_path.write_text(json.dumps({"type": "FeatureCollection", "features": features}))
    log(f"{state}: saved {len(features)} reprojected features")
    return out_path

# -------------------------------------------------------------------
def build_tiles():
    files = [str(f) for f in DATA_DIR.glob("*.geojson") if f.stat().st_size > 0]
    if not files:
        log("‚ùå No GeoJSONs found.")
        return False

    if TILES_DIR.exists():
        subprocess.run(["rm", "-rf", str(TILES_DIR)])
    os.makedirs(TILES_DIR, exist_ok=True)

    # Build per-state MBTiles to avoid overlap chaos
    mbtiles = []
    for f in files:
        state = Path(f).stem
        mb = f"{state}.mbtiles"
        mbtiles.append(mb)
        cmd = [
            "tippecanoe",
            "-Z", str(ZOOM_MIN),
            "-z", str(ZOOM_MAX),
            "--force",
            "--projection=EPSG:4326",
            "--layer", f"MineraLink_{state}",
            "--no-feature-limit",
            "--no-tile-size-limit",
            "--read-parallel",
            "-o", str(TILES_DIR / mb),
            f
        ]
        log(f"‚õèÔ∏è Building tiles for {state}")
        subprocess.run(cmd, check=True)

    # Merge all states into final /tiles
    merge_cmd = [
        "tile-join",
        "--force",
        "--no-feature-limit",
        "--no-tile-size-limit",
        "-e", "tiles"
    ] + [str(TILES_DIR / m) for m in mbtiles]

    log("üß© Joining all state layers into /tiles...")
    subprocess.run(merge_cmd, check=True)
    log("‚úÖ Tiles built cleanly and aligned to Web Mercator")
    return True

# -------------------------------------------------------------------
def git_push():
    msg = f"Auto-update tiles ‚Äî {datetime.now().strftime('%Y-%m-%d %H:%M UTC')}"
    subprocess.run(["git", "config", "user.name", "github-actions"], check=True)
    subprocess.run(["git", "config", "user.email", "actions@github.com"], check=True)
    subprocess.run(["git", "checkout", "-B", "gh-pages"], check=True)
    subprocess.run(["git", "add", "tiles"], check=True)
    subprocess.run(["git", "commit", "-m", msg], check=False)
    subprocess.run([
        "git", "push", "--force",
        "https://x-access-token:${GITHUB_TOKEN}@github.com/mikeaa1983/mineralink-tiles.git",
        "gh-pages"
    ], shell=True, check=False)
    log("‚úÖ Tiles pushed to gh-pages branch.")

# -------------------------------------------------------------------
def main():
    start = time.time()
    DATA_DIR.mkdir(exist_ok=True)
    TILES_DIR.mkdir(exist_ok=True)
    if LOG_FILE.exists():
        LOG_FILE.unlink()

    for state, (url, epsg) in STATES.items():
        log(f"Fetching {state} wells...")
        fetch_geojson(url, epsg, state)

    if build_tiles():
        git_push()

    log(f"üèÅ Complete in {round(time.time() - start, 1)}s")

if __name__ == "__main__":
    main()
