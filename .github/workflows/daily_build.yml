name: Daily Build and Deploy Tiles

on:
  workflow_dispatch:
  schedule:
    - cron: "0 2 * * *" # every day at 2 AM UTC

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      run_id: ${{ github.run_id }}

    steps:
      - name: üßæ Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: ‚öôÔ∏è Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y tippecanoe gdal-bin
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: üèóÔ∏è Run tile builder
        run: |
          echo "üèóÔ∏è Running mineralink_fetch_and_tile.py"
          python3 mineralink_fetch_and_tile.py
          echo "‚úÖ Build complete. Directory contents:"
          ls -R | head -80

      - name: üì¶ Package site for deployment
        run: |
          echo "üì¶ Packaging build output into site/"
          mkdir -p site
          cp index.html site/ || echo "‚ö†Ô∏è Missing index.html"
          cp -r tiles site/ || echo "‚ö†Ô∏è No tiles directory"
          cp -r fallback_data site/ || echo "‚ö†Ô∏è No fallback_data directory"
          cp .nojekyll site/ || echo "‚ö†Ô∏è Missing .nojekyll"
          ls -R site | head -80

      - name: üíæ Upload site artifact
        uses: actions/upload-artifact@v4
        with:
          name: site
          path: site
          if-no-files-found: error

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: üßæ Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üíæ Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: site
          path: ./site

      - name: üóúÔ∏è Extract site artifact
        run: |
          echo "üóúÔ∏è Extracting artifact..."
          if [ -f site.zip ]; then
            unzip -o site.zip -d site/
          fi
          ls -R site | head -80

      - name: üöÄ Deploy to gh-pages
        run: |
          echo "üöÄ Preparing deployment..."
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"

          # Switch to or create gh-pages branch
          if git show-ref --verify --quiet refs/heads/gh-pages; then
            git checkout gh-pages
          else
            git checkout --orphan gh-pages
          fi

          # Clear branch and copy new site
          rm -rf *
          mkdir -p tiles fallback_data
          cp -r site/tiles/* ./tiles/ 2>/dev/null || echo "‚ö†Ô∏è No tiles folder"
          cp -r site/fallback_data/* ./fallback_data/ 2>/dev/null || echo "‚ö†Ô∏è No fallback data"
          cp site/index.html ./index.html || echo "‚ö†Ô∏è Missing index.html"
          cp site/.nojekyll ./.nojekyll || echo "‚ö†Ô∏è Missing .nojekyll"

          echo "üìÅ Files ready for commit:"
          find . -maxdepth 3 | head -80

          git add .
          git commit -m "Auto-deploy $(date -u +'%Y-%m-%d %H:%M UTC')" || echo "No changes"
          git push origin gh-pages --force

          echo "‚úÖ Deployment finished successfully."
